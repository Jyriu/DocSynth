const axios = require('axios');

/**
 * Service de r√©sum√© utilisant l'API Hugging Face
 * Mod√®les recommand√©s:
 * - facebook/bart-large-cnn (anglais)
 * - csebuetnlp/mT5_multilingual_XLSum (multilingue)
 * - moussaKam/barthez-orangesum-abstract (fran√ßais)
 */

// Configuration Mistral Pro API
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY;
const MISTRAL_API_URL = 'https://api.mistral.ai/v1/chat/completions';
const MODEL_NAME = process.env.MISTRAL_MODEL || 'mistral-small-latest'; // param√©trable via env

// System prompts sp√©cialis√©s pour chaque t√¢che
const SYSTEM_PROMPTS = {
  condensation: `Condensez ce texte en gardant toutes les informations importantes : chiffres, dates, noms, d√©tails cl√©s. Supprimez les r√©p√©titions et mots inutiles. R√©duisez d'environ 40% maximum.

R√©pondez uniquement avec le texte condens√©.`,

  summary: `Vous √™tes un assistant IA expert qui doit r√©sumer un document (article, contrat, √©tude, jugement, rapport, etc.).

Objectif : produire un r√©sum√© CLAIR, CONCIS et COH√âRENT en fran√ßais, adapt√© √† un lecteur professionnel press√©.

Directives :
‚Ä¢ Inclure : sujet, id√©es/arguments principaux, faits ou chiffres essentiels, conclusions ou recommandations majeures, ou m√™me des d√©tails et formats type tableau, liste etc...
‚Ä¢ Exclure : JSON
‚Ä¢ Pas d'introduction ¬´ Voici le r√©sum√© ¬ª ni de conclusion ¬´ En r√©sum√© ¬ª. Juste du texte r√©sumant le document avec assez de d√©tails pour que le lecteur puisse comprendre le document sans avoir besoin de lire le document en entier.
‚Ä¢ Ton neutre et informatif, vocabulaire courant mais pr√©cis.`
};

async function summarizeWithMistral(text, options = {}) {
  try {
    if (!MISTRAL_API_KEY) {
      throw new Error('MISTRAL_API_KEY manquante dans les variables d\'environnement');
    }

    const promptType = options.promptType || 'summary';
    const systemPrompt = options.customSystemPrompt || SYSTEM_PROMPTS[promptType] || SYSTEM_PROMPTS.summary;
    
    if (process.env.NODE_ENV !== 'production') {
      console.log(`ü§ñ Appel Mistral Pro API...`);
      console.log(`üìù Type: ${promptType}`);
      console.log(`üìä Texte d'entr√©e: ${text.length} caract√®res`);
    }
    
    const response = await axios.post(
      MISTRAL_API_URL,
      {
        model: MODEL_NAME,
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user", 
            content: text
          }
        ],
        temperature: 0.3, // Factuel et pr√©cis
        max_tokens: promptType === 'condensation' ? 800 : 1200,
        top_p: 0.9
      },
      {
        headers: {
          'Authorization': `Bearer ${MISTRAL_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 120000 // 2 minutes pour Mistral Pro
      }
    );

    if (response.data && response.data.choices && response.data.choices[0] && response.data.choices[0].message) {
      const result = response.data.choices[0].message.content.trim();
      if (process.env.NODE_ENV !== 'production') {
        console.log(`‚úÖ R√©sum√© Mistral g√©n√©r√©: ${result.length} caract√®res`);
        // Logs des tokens pour monitoring
        if (response.data.usage) {
          console.log(`üìä Tokens utilis√©s: ${response.data.usage.total_tokens} (prompt: ${response.data.usage.prompt_tokens}, completion: ${response.data.usage.completion_tokens})`);
        }
      }
      
      return result;
    } else {
      throw new Error('Format de r√©ponse inattendu de l\'API Mistral');
    }

  } catch (error) {
    console.error('‚ùå Erreur Mistral API:', error.message);
    
    if (error.response) {
      console.error('üìä Status:', error.response.status);
      console.error('üìÑ Data:', JSON.stringify(error.response.data, null, 2));
      
      if (error.response.status === 429) {
        throw new Error('429'); // Rate limit
      }
      
      if (error.response.status === 401) {
        throw new Error('Cl√© API Mistral invalide ou expir√©e');
      }
      
      if (error.response.status === 402) {
        throw new Error('Quota Mistral d√©pass√© ou paiement requis');
      }
    }
    
    if (error.code === 'ECONNABORTED') {
      throw new Error('Timeout de l\'API Mistral');
    }
    
    throw error;
  }
}

module.exports = summarizeWithMistral;